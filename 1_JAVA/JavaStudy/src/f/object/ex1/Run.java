package f.object.ex1;

/*
 * package
 * 클래스간의 공간적 충돌이나 접근 방법의 충돌을 막기 위해
 * 저장위치를 구분하여, 명확하게 접근할 수 있도록 해주는 것
 * 보통 네이밍 방법은 회사 도메인을 역으로 입력한다.
 * 	-> ex ) https://www.kh.com => pakage com.kh.팀명(프로젝트명)
 * 
 * import 로 패키지를 불러올 수 있다.
 * import package.*; // import에서 *은 해당 패키지 내 모든 클래스를 가져온다는 의미
 * import로 불러온 클래스는 해당 클래스 내에서 명시적인 패키지 선언 없이 바로 객체 생성이 가능하다
 * import 하지 않는다면 java.util.Scanner s = new java.util.Scanner(System.in);
 * 
 * ex) import java.util.Scanner; => Scanner s = new Scanner(System.in); 
 */

// 보통 Run이라고 생성하는 class는 객체 생성을 위한 class가 아닌, main문을 통해 프로그램 실행을 위한 클래스다.
public class Run {
	/*
	 * 1. 객체지향 언어 : "객체"를 "지향"하는 언어로 "객체중심"으로 돌아간다.
	 * 
	 * 2. 객체 : 현실세계에서 독립적(목적이 있고, 가치가 있는 것)으로 존재하는 모든 것을 의미
	 * 			현실세계에서는 객체들 간의 상호 작용으로 돌아감
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계와 객체들간의 상호작용 -> 프로그래밍을 통해서 가상세계로 구현하는
	 * 						가장 효과적인 방법
	 * 
	 * 4. 구현하고자하는 프로그램상의 필요한 객체들을 만들기 위해서(즉, 생성하기 위해서)
	 * 	=> 클래스라는 설계도가 먼저 필요하다. ( 클래스? 각 객체들의 속성(데이터)들을 담아낼 그릇같은 존재 )
	 * 
	 * 5. 추상화 과정
	 * 		1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해 볼 것
	 * 		2) 그 객체들의 공통적인 속성, 기능들을 추출해보자
	 * 		3) 추출한 것들을 가지고 내가 구현하고자하는 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능을 제거
	 * 		4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할 것인지 정의
	 * 		
	 * 		ex) 학생 관리 프로그램
	 * 		1) 학생 관련 객체(alice 학생, john 학생, james 학생 등등...)
	 * 		2) 공통적인 속성 및 기능(이름, 나이, 주소, 전화번호, 키, 달리기 속도, 몸무게, 먹는다, 잔다 등등...)
	 * 		3) 추출한 것들을 가지고 내가 구현하고자하는 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능을 제거
	 * 			- 학생 "인적사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전화번호, 반....
	 * 			- 학생 "성적"을 관리하는 프로그램 : 이름, 반, 과목별 점수...
	 * 			- 학생 "건강"을 관리하는 프로그램 : 이름, 반, 키, 몸무게, 달리기 속도, 먹는다, 잔다...
	 * 
	 * 		4) 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할 것인지 정의
	 * 			- 이름 : String name;
	 * 			- 나이 : int age;
	 * 			- 키 : double height;
	 * 
	 * 6. 추상화한 객체를 프로그램에 적용시키기
	 * 		1. "변수"만으로 프로그래밍을 한다.
	 * 			변수 : 하나의 자료형으로 하나의 값만 보관할 수 있음
	 * 
	 * 			alice 학생 객체 하나 만들기
	 * 				String name1 = "alice"; 
	 * 				int age1 = 20; 
	 * 				double height1 = 165.0;
	 * 
	 * 			john 학생 객체 하나 만들기
	 * 				String name2 = "john"; 
	 * 				int age2 = 19; 
	 * 				double height2 = 193.0;
	 * 			
	 *			하지만 관리해야할 변수가 너무 많다...
	 * 
	 * 		2. 배열로 프로그래밍 한다면
	 * 			배열 : 하나의 자료형으로 여러개의 값들을 보관할 수 있음
	 * 			이름을 보관하는 배열 String[] name = {"최경채", "안제휘"....};
	 * 			나이를 보관하는 배열 int[] age = {20, 19...};
	 * 
	 * 			자료의 삽입 및 삭제가 자유롭지 않다... ( 중간에 2번 학생이 나가면, 1~3번 사이는 그냥 비어있음 )
	 * 			삽입 삭제하다 인덱스가 어긋날 수도 있고... name1 = age2 = height1 이런식으로...
	 * 
	 * 		3. 그래서 나온 개념 -> 구조체
	 * 			구조체 : 여러개의 자료형의 여러개의 값들을 보관할 수 있다.
	 * 			String 값도 보관하고, int 값도 보관하고, 동시에 double값도 함께 보관하는 자료형을 직접 만든다고 생각
	 * 
	 * 			Struct human{
	 * 				String name;
	 * 				int age;
	 * 				double height;
	 * 			}
	 * 
	 * 		=> 자바에서는 구조체를 확장해( + 기능 ) 클래스라는 개념을 만들었다.
	 * 
	 * 		* 캡슐화 : 추상화를 통해서 정의된 속성들과 기능들을 하나로 묶어 관리하는 기법
	 * 				 클래스에서 가장 중요한 목적인 "데이터의 접근제한(정보은닉)"을 원칙으로
	 * 				 외부로부터의 "데이터 접근을 막고"
	 * 				 대신 "데이터를 간접적으로 처리(값을 변경하거나, 가져오는 것 등)"할 메소드들을
	 * 				 클래스 내부에 작성하여 관리하는 것
	 * 				 다양한 기능을 묶어 하나의 큰 기능을 만드는 것
	 * 		
	 */
	public static void main(String[] args) {
		// 객체를 생성할 때
		// class명 객체이름(참조변수) = new class명();
		Student alice = new Student();
		Student john = new Student();
		
		// .(점)은 해당 메모리에 접근하는 접근자
		alice.name = "alice";
		alice.age = 20;
		
		john.name = "john";
		john.age = 19;
		
		alice.print();
		john.print();
	}
}
