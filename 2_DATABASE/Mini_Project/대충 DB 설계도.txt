멤버(Member)
	-멤버 uid(SEQ) 		NUMBER		PRIMARY KEY
	-멤버 이름		VARCHAR2(30)	
	-멤버 id			VARCHAR2(20)	UNIQUE			NOT NULL
	-멤버 pwd		VARCHAR2(30)	NOT NULL
	-멤버 등급 코드		VARCHAR2(5)	FOREIGN KEY(멤버등급)	DEFAULT 'M1'
	-멤버 가입일		DATE		DEFAULT SYSDATE
	-멤버 탈퇴 여부( Y / N ) 	CHAR(1)		DEFAULT 'N'

멤버등급
	-멤버 등급 코드	VARCHAR2(5)	PRIMARY KEY	
	-멤버 등급 이름	VARCHAR2(30)

주식(Stock)
	-주식 ID(SEQ)		NUMBER		PRIMARY KEY
	-주식 명			VARCHAR2(50)
	-주식 상장폐지 여부( Y/N )	CHAR(1)				

보유 주식(Shares)
	-멤버 uid		NUMBER		PRIMARY KEY	FOREIGN KEY(멤버)
	-주식 ID		NUMBER		PRIMARY KEY	FOREIGN KEY(주식)
	-주식 수량	NUMBER		DEFAULT 0
	-주식 구매 가격	NUMBER		DEFAULT 0
	-가격 변동률	NUMBER		DEFAULT 0

주식 거래 기록(TradeLog)
	-거래 번호(SEQ)			NUMBER		PRIMARY	KEY
	-멤버 uid				NUMBER		FOREIGN KEY(멤버)
	-거래 날짜			DATE		DEFAULT SYSDATE
	-주식 ID				NUMBER		FOREIGN KEY(주식)
	-주식 거래 수량			NUMBER		NOT NULL
	-주식 거래 가격			NUMBER		NOT NULL
	-주식 거래 정보(구매/판매)		VARCHAR2(9)	NOT NULL

게시판(Bulletin)
	-게시글 번호(SEQ)		NUMBER		PRIMARY KEY
	-게시글 조회수		NUMBER		DEFAULT 0
	-게시글 작성 날짜		DATE		DEFAULT SYSDATE
	-게시글 작성자 UID(SEQ)	NUMBER		FOREIGN KEY(멤버)
	-게시글 제목		VARCHAR2(90)	
	-게시글 내용		VARCHAR2(1500)
	-게시글 삭제 여부 ( Y / N )	CHAR(1)		DEFAULT 'N'

댓글(Comment)
	-게시글 번호		NUMBER		PRIMARY KEY		FOREIGN KEY(게시판)
	-댓글 번호(SEQ)		NUMBER		PRIMARY KEY
	-댓글 작성 날짜		DATE		DEFAULT SYSDATE
	-댓글 작성자 UID		NUMBER		FOREIGN KEY(멤버)
	-댓글 내용		VARCHAR2(300)
	-댓글 삭제 여부 ( Y / N )	CHAR(1)		DEFAULT 'N'

아이템(Item)
	-아이템 번호(SEQ)	NUMBER		PRIMARY KEY
	-아이템 이름	VARCHAR2(30)
	-아이템 가격	NUMBER		DEFAULT 0
	-아이템 설명	VARCHAR2(600)

보유 아이템
	-멤버 번호	NUMBER		PRIMARY KEY	FOREIGN KEY(멤버)
	-아이템 번호	NUMBER		PRIMARY KEY	FOREIGN KEY(아이템)
	-아이템 수량	NUMBER		DEFAULT 0

===============================================================================

https://dbdiagram.io/d

TABLE TB_MEMBER {
  MEMBER_UID NUMBER PK
  MEMBER_NAME VARCHAR2
  MEMBER_ID VARCHAR2
  MEMBER_PWD  VARCHAR2
  MEMBER_RCODE VARCHAR2
  ENROLL_DATE DATE
  WITHDRAW_YN CHAR
}

TABLE TB_MEMBER_RANK{
  MEMBER_RCODE VARCHAR2 PK
  MEMBER_RNAME VARCHAR2
}

TABLE TB_STOCK_LIST{
  STOCK_ID  NUMBER PK
  STOCK_NAME VARCHAR2
  DEFAULT_PRICE NUMBER
  DEFAULT_QTY NUMBER
  DELIST_YN CHAR
}

TABLE TB_MEMBER_STOCK{
  STOCK_ID NUMBER PK
  MEMBER_UID NUMBER PK
  MAX_QTY NUMBER
  STOCK_QTY NUMBER
  STOCK_PRICE NUMBER
  NEXT_FLUCT NUMBER
}

TABLE TB_SHARE{
  MEMBER_UID  NUMBER  PK
  STOCK_ID  NUMBER  PK
  SHARE_QTY NUMBER
  SHARE_PRICE NUMBER
}

TABLE TB_TRADELOG{
  TRADE_ID  NUMBER  PK
  MEMBER_UID  NUMBER
  TRADE_DATE  DATE
  STOCK_ID  NUMBER
  TRADE_QTY NUMBER
  TRADE_PRICE NUMBER
  TRADE_STATUS  VARCHAR2
}

TABLE TB_BULLETIN{
  BULLETIN_ID NUMBER PK
  BULLETIN_VCOUNT NUMBER
  BULLETIN_WRT_DATE VARCHAR2
  MEMBER_UID  VARCHAR2
  BULLETIN_TITLE  VARCHAR2
  BULLETIN_CONTENT  VARCHAR2
  BULLETIN_DLT_YN CHAR
}

TABLE TB_COMMENT{
  BULLETIN_ID NUMBER
  COMMENT_ID NUMBER PK
  COMMENT_WRT_DATE DATE
  MEMBER_UID  VARCHAR2
  COMMENT_CONTENT VARCHAR2
  COMMENT_DLT_YN CHAR
}

TABLE TB_ITEM{
  ITEM_ID NUMBER PK
  ITEM_NAME VARCHAR2
  ITEM_PRICE NUMBER
  ITEM_DESC VARCHAR2
}

TABLE TB_MEMBER_ITEM{
  MEMBER_UID NUMBER PK
  ITEM_ID NUMBER PK
  ITEM_QTY NUMBER
}

REF : TB_MEMBER.MEMBER_RCODE > TB_MEMBER_RANK.MEMBER_RCODE
REF : TB_SHARE.MEMBER_UID > TB_MEMBER.MEMBER_UID
REF : TB_SHARE.STOCK_ID > TB_STOCK_LIST.STOCK_ID
REF : TB_TRADELOG.MEMBER_UID > TB_MEMBER.MEMBER_UID
REF : TB_TRADELOG.STOCK_ID > TB_STOCK_LIST.STOCK_ID
REF : TB_BULLETIN.MEMBER_UID > TB_MEMBER.MEMBER_UID
REF : TB_COMMENT.BULLETIN_ID > TB_BULLETIN.BULLETIN_ID
REF : TB_COMMENT.MEMBER_UID > TB_MEMBER.MEMBER_UID
REF : TB_MEMBER_ITEM.ITEM_ID > TB_ITEM.ITEM_ID
REF : TB_MEMBER_ITEM.MEMBER_UID > TB_MEMBER.MEMBER_UID
REF : TB_MEMBER_STOCK.STOCK_ID > TB_STOCK_LIST.STOCK_ID
REF : TB_MEMBER_STOCK.MEMBER_UID > TB_MEMBER.MEMBER_UID

=====================================================

ORACLE DB SQL


DROP TABLE TB_SHARE;
DROP TABLE TB_COMMENT;
DROP TABLE TB_BULLETIN;
DROP TABLE TB_MEMBER_ITEM;
DROP TABLE TB_ITEM;
DROP TABLE TB_TRADELOG;
DROP TABLE TB_MEMBER_STOCK;
DROP TABLE TB_MEMBER;
DROP TABLE TB_MEMBER_RANK;
DROP TABLE TB_STOCK_LIST;

--================== 테이블 생성  ======================
CREATE TABLE "TB_MEMBER" (
  "MEMBER_UID" NUMBER CONSTRAINT TB_MEMBER_PK PRIMARY KEY,
  "MEMBER_NAME" VARCHAR2(30),
  "MEMBER_ID" VARCHAR2(20) CONSTRAINT MEMBER_ID_UQ UNIQUE CONSTRAINT MEMBER_ID_NN NOT NULL,
  "MEMBER_PWD" VARCHAR2(30) CONSTRAINT MEMBER_PWD_NN NULL,
  "MEMBER_RCODE" VARCHAR2(5) DEFAULT 'M1',
  "ENROLL_DATE" DATE DEFAULT SYSDATE,
  "WITHDRAW_YN" CHAR(1) DEFAULT 'N' CONSTRAINT WITHDRAW_YN_CK CHECK(WITHDRAW_YN IN ('Y','N')),
  "PLAY_DAY" NUMBER DEFAULT 0,
  "BALANCE" NUMBER DEFAULT 1000000
);

COMMENT ON COLUMN TB_MEMBER.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '멤버 이름';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '멤버 아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '멤버 비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_RCODE IS '멤버 등급번호';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '멤버 가입일';
COMMENT ON COLUMN TB_MEMBER.WITHDRAW_YN IS '멤버 탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.PLAY_DAY IS '게임 내 날짜';
COMMENT ON COLUMN TB_MEMBER.BALANCE IS '멤버 재산(현금)';

CREATE TABLE "TB_MEMBER_RANK" (
  "MEMBER_RCODE" VARCHAR2(5) CONSTRAINT TB_MEMBER_RANK_PK PRIMARY KEY,
  "MEMBER_RNAME" VARCHAR2(30)
);

COMMENT ON COLUMN TB_MEMBER_RANK.MEMBER_RCODE IS '멤버 등급번호';
COMMENT ON COLUMN TB_MEMBER_RANK.MEMBER_RNAME IS '멤버 등급이름';

CREATE TABLE "TB_STOCK_LIST" (
  "STOCK_ID" NUMBER CONSTRAINT TB_STOCK_LIST_PK PRIMARY KEY,
  "STOCK_NAME" VARCHAR2(50) CONSTRAINT STOCK_NAME_UQ UNIQUE,
  "DELIST_YN" CHAR(1) DEFAULT 'N' CONSTRAINT DELIST_YN_CK CHECK(DELIST_YN IN('Y','N'))
);

COMMENT ON COLUMN TB_STOCK_LIST.STOCK_ID IS '주식 번호(시퀀스)';
COMMENT ON COLUMN TB_STOCK_LIST.STOCK_NAME IS '주식 이름';

-- 모의주식 "게임"으로, 주식가격은 멤버별로 공유하지 않는다.
CREATE TABLE "TB_MEMBER_STOCK"(
    "STOCK_ID" NUMBER,
    "MEMBER_UID" NUMBER,
    "MAX_QTY" NUMBER DEFAULT 0,
    "STOCK_QTY" NUMBER DEFAULT 0,
    "STOCK_PRICE" NUMBER DEFAULT 0,
    "NEXT_FLUCT" NUMBER DEFAULT 0,
    CONSTRAINT TB_MEMBER_STOCK_PK PRIMARY KEY(STOCK_ID, MEMBER_UID)
);

COMMENT ON COLUMN TB_MEMBER_STOCK.STOCK_ID IS '주식 번호(시퀀스)';
COMMENT ON COLUMN TB_MEMBER_STOCK.MAX_QTY IS '주식 최대 수량';
COMMENT ON COLUMN TB_MEMBER_STOCK.STOCK_QTY IS '시장에 나온 현재 주식 수량';
COMMENT ON COLUMN TB_MEMBER_STOCK.STOCK_PRICE IS '주식 가격';
COMMENT ON COLUMN TB_MEMBER_STOCK.NEXT_FLUCT IS '다음날 가격 변동률';

CREATE TABLE "TB_SHARE" (
  "MEMBER_UID" NUMBER,
  "STOCK_ID" NUMBER,
  "SHARE_QTY" NUMBER DEFAULT 0,
  "PURCHASE_PRICE" NUMBER DEFAULT 0,
  CONSTRAINT TB_SHARE_PK PRIMARY KEY ("MEMBER_UID", "STOCK_ID")
);

COMMENT ON COLUMN TB_SHARE.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_SHARE.STOCK_ID IS '주식 번호(시퀀스)';
COMMENT ON COLUMN TB_SHARE.SHARE_QTY IS '주식 보유량';
COMMENT ON COLUMN TB_SHARE.PURCHASE_PRICE IS '주식 매입가';

CREATE TABLE "TB_TRADELOG" (
  "TRADE_ID" NUMBER CONSTRAINT TB_TRADELOG_PK PRIMARY KEY,
  "MEMBER_UID" NUMBER,
  "TRADE_DATE" DATE DEFAULT SYSDATE,
  "STOCK_ID" NUMBER,
  "TRADE_QTY" NUMBER CONSTRAINT TRADE_QTY_NN NOT NULL,
  "TRADE_PRICE" NUMBER CONSTRAINT TRADE_PRICE_NN NOT NULL,
  "TRADE_STATUS" VARCHAR2(9) CONSTRAINT TRADE_STATUS NOT NULL
);

COMMENT ON COLUMN TB_TRADELOG.TRADE_ID IS '거래 번호(시퀀스)';
COMMENT ON COLUMN TB_TRADELOG.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_TRADELOG.TRADE_DATE IS '거래 일자';
COMMENT ON COLUMN TB_TRADELOG.STOCK_ID IS '주식 이름';
COMMENT ON COLUMN TB_TRADELOG.TRADE_QTY IS '거래 수량';
COMMENT ON COLUMN TB_TRADELOG.TRADE_PRICE IS '거래 가격';
COMMENT ON COLUMN TB_TRADELOG.TRADE_STATUS IS '상태(판매/구매)';

CREATE TABLE "TB_BULLETIN" (
  "BULLETIN_ID" NUMBER CONSTRAINT TB_BULLETIN_PK PRIMARY KEY,
  "BULLETIN_VCOUNT" NUMBER DEFAULT 0,
  "BULLETIN_WRT_DATE" DATE DEFAULT SYSDATE,
  "MEMBER_UID" NUMBER,
  "BULLETIN_TITLE" VARCHAR2(90),
  "BULLETIN_CONTENT" VARCHAR2(1500),
  "BULLETIN_DLT_YN" CHAR(1) DEFAULT 'N' CONSTRAINT BULLETIN_DLT_YN_CK CHECK( BULLETIN_DLT_YN IN ('Y','N') )
);

COMMENT ON COLUMN TB_BULLETIN.BULLETIN_ID IS '게시글 번호(시퀀스)';
COMMENT ON COLUMN TB_BULLETIN.BULLETIN_VCOUNT IS '게시글 조회수';
COMMENT ON COLUMN TB_BULLETIN.BULLETIN_WRT_DATE IS '게시글 작성일자';
COMMENT ON COLUMN TB_BULLETIN.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_BULLETIN.BULLETIN_TITLE IS '게시글 제목';
COMMENT ON COLUMN TB_BULLETIN.BULLETIN_CONTENT IS '게시글 내용';
COMMENT ON COLUMN TB_BULLETIN.BULLETIN_DLT_YN IS '게시글 삭제여부(Y/N)';

CREATE TABLE "TB_COMMENT" (
  "BULLETIN_ID" NUMBER,
  "COMMENT_ID" NUMBER,
  "COMMENT_WRT_DATE" DATE DEFAULT SYSDATE,
  "MEMBER_UID" NUMBER,
  "COMMENT_CONTENT" VARCHAR2(300),
  "COMMENT_DLT_YN" CHAR(1) DEFAULT 'N' CONSTRAINT COMMENT_DLT_YN_CK CHECK( COMMENT_DLT_YN IN ('Y','N') ),
  CONSTRAINT TB_COMMENT_PK PRIMARY KEY("BULLETIN_ID","COMMENT_ID")
);

COMMENT ON COLUMN TB_COMMENT.BULLETIN_ID IS '게시글 번호(시퀀스)';
COMMENT ON COLUMN TB_COMMENT.COMMENT_ID IS '댓글 번호';
COMMENT ON COLUMN TB_COMMENT.COMMENT_WRT_DATE IS '댓글 작성일자';
COMMENT ON COLUMN TB_COMMENT.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_COMMENT.COMMENT_CONTENT IS '댓글 내용';
COMMENT ON COLUMN TB_COMMENT.COMMENT_DLT_YN IS '댓글 삭제여부(Y/N)';

CREATE TABLE "TB_ITEM" (
  "ITEM_ID" NUMBER CONSTRAINT TB_ITEM_PK PRIMARY KEY,
  "ITEM_NAME" VARCHAR2(30),
  "ITEM_PRICE" NUMBER DEFAULT 0,
  "ITEM_DESC" VARCHAR2(600)
);

COMMENT ON COLUMN TB_ITEM.ITEM_ID IS '아이템 번호(시퀀스)';
COMMENT ON COLUMN TB_ITEM.ITEM_NAME IS '아이템 이름';
COMMENT ON COLUMN TB_ITEM.ITEM_PRICE IS '아이템 가격';
COMMENT ON COLUMN TB_ITEM.ITEM_DESC IS '아이템 설명';

CREATE TABLE "TB_MEMBER_ITEM" (
  "MEMBER_UID" NUMBER,
  "ITEM_ID" NUMBER,
  "ITEM_QTY" NUMBER DEFAULT 0,
  CONSTRAINT TB_MEMBER_ITEM_PK PRIMARY KEY ("MEMBER_UID", "ITEM_ID")
);

COMMENT ON COLUMN TB_MEMBER_ITEM.MEMBER_UID IS '멤버UID(시퀀스)';
COMMENT ON COLUMN TB_MEMBER_ITEM.ITEM_ID IS '아이템 번호(시퀀스)';
COMMENT ON COLUMN TB_MEMBER_ITEM.ITEM_QTY IS '아이템 보유수량';

-- ==================== 외래키 설정 =======================

ALTER TABLE "TB_MEMBER" ADD CONSTRAINT MEMBER_RCODE_FK 
FOREIGN KEY ("MEMBER_RCODE") REFERENCES "TB_MEMBER_RANK" ("MEMBER_RCODE");

ALTER TABLE "TB_SHARE" ADD CONSTRAINT TB_SHARE_MEMBER_UID_FK 
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_SHARE" ADD CONSTRAINT TB_SHARE_STOCK_ID_FK 
FOREIGN KEY ("STOCK_ID") REFERENCES "TB_STOCK_LIST" ("STOCK_ID")
ON DELETE CASCADE;

ALTER TABLE "TB_TRADELOG" ADD CONSTRAINT TB_TRADELOG_MEMBER_UID_FK 
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_TRADELOG" ADD CONSTRAINT TB_TRADELOG_STOCK_ID_FK 
FOREIGN KEY ("STOCK_ID") REFERENCES "TB_STOCK_LIST" ("STOCK_ID")
ON DELETE CASCADE;

ALTER TABLE "TB_BULLETIN" ADD CONSTRAINT TB_BULLETIN_MEMBER_UID_FK 
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_COMMENT" ADD CONSTRAINT TB_COMMENT_BULLETIN_ID_FK 
FOREIGN KEY ("BULLETIN_ID") REFERENCES "TB_BULLETIN" ("BULLETIN_ID")
ON DELETE CASCADE;

ALTER TABLE "TB_COMMENT" ADD CONSTRAINT TB_COMMENT_MEMBER_UID_FK 
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_MEMBER_ITEM" ADD CONSTRAINT TB_MEMBER_ITEM_ITEM_ID_FK 
FOREIGN KEY ("ITEM_ID") REFERENCES "TB_ITEM" ("ITEM_ID")
ON DELETE CASCADE;

ALTER TABLE "TB_MEMBER_ITEM" ADD CONSTRAINT TB_MEMBER_ITEM_MEMBER_UID_FK 
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_MEMBER_STOCK" ADD CONSTRAINT TB_MEMBER_STOCK_MEMBER_UID_FK
FOREIGN KEY ("MEMBER_UID") REFERENCES "TB_MEMBER" ("MEMBER_UID")
ON DELETE CASCADE;

ALTER TABLE "TB_MEMBER_STOCK" ADD CONSTRAINT TB_MEMBER_STOCK_STOCK_ID_FK
FOREIGN KEY ("STOCK_ID") REFERENCES "TB_STOCK_LIST" ("STOCK_ID")
ON DELETE CASCADE;

-- ================ 시퀀스 생성 ====================

DROP SEQUENCE MEMBER_UID_SEQ;
DROP SEQUENCE STOCK_ID_SEQ;
DROP SEQUENCE TRADE_ID_SEQ;
DROP SEQUENCE BULLETIN_ID_SEQ;
DROP SEQUENCE ITEM_ID_SEQ;

CREATE SEQUENCE MEMBER_UID_SEQ;
CREATE SEQUENCE STOCK_ID_SEQ;
CREATE SEQUENCE TRADE_ID_SEQ;
CREATE SEQUENCE BULLETIN_ID_SEQ;
CREATE SEQUENCE ITEM_ID_SEQ;
-- COMMENT_ID 시퀀스는 트리거로 게시글 별로 다르게 관리한다.

-- ================ 트리거 설정 ====================

-- COMMENT_ID 시퀀스 생성 ( 게시글마다 1부터 생성 )
CREATE OR REPLACE TRIGGER COMMENT_ID_TRG
BEFORE INSERT ON TB_COMMENT
FOR EACH ROW
DECLARE 
    SEQ_NUM NUMBER;
BEGIN
    SELECT NVL(MAX(COMMENT_ID),0) + 1 
    INTO SEQ_NUM
    FROM TB_COMMENT
    WHERE "BULLETIN_ID" = :NEW.BULLETIN_ID;
    
    :NEW.COMMENT_ID := SEQ_NUM;
END;
/

-- SET DEFAULT MEMBER_RCODE
CREATE OR REPLACE TRIGGER MEMBER_RANK_DEFAULT_TRG
BEFORE DELETE ON TB_MEMBER_RANK
FOR EACH ROW
BEGIN
    UPDATE TB_MEMBER
    SET MEMBER_RCODE = 'M1'
    WHERE MEMBER_RCODE = :OLD.MEMBER_RCODE;
END;
/

-- 멤버별 주식 종목 생성
CREATE OR REPLACE TRIGGER MEMBER_STOCK_TRG
AFTER INSERT ON TB_MEMBER
FOR EACH ROW
BEGIN
    FOR STOCK IN ( SELECT STOCK_ID FROM TB_STOCK_LIST )
    LOOP
        INSERT INTO TB_MEMBER_STOCK VALUES(STOCK.STOCK_ID, :NEW.MEMBER_UID, DEFAULT, DEFAULT, DEFAULT, DEFAULT);
    END LOOP;
END;
/

-- =============== 프로시저 생성 ======================
-- https://m.blog.naver.com/hj_kim97/222842014255

CREATE OR REPLACE PROCEDURE PURCHASE_STOCK_PROC (
    p_member_uid IN NUMBER,
    p_stock_id IN NUMBER,
    p_purchase_qty IN NUMBER,
    p_purchase_price IN NUMBER
) AS
BEGIN
    -- 1. TB_SHARE에서 사용자가 구매한 주식을 등록시키되, 만약 이미 있다면 주식의 수량 STOCK_QTY를 증가
    MERGE
    INTO TB_SHARE
    USING (SELECT p_stock_id , p_member_uid FROM DUAL)
    ON (TB_SHARE.STOCK_ID = p_stock_id AND TB_SHARE.MEMBER_UID = p_member_uid)
    WHEN MATCHED THEN
        UPDATE SET TB_SHARE.SHARE_QTY = TB_SHARE.SHARE_QTY + p_purchase_qty
    WHEN NOT MATCHED THEN
        INSERT VALUES(p_member_uid, p_stock_id, p_purchase_qty, p_purchase_price);
        
     -- 2. p_purchase_qty 만큼 p_stock_id의 TB_MEMBER_STOCK.STOCK_QTY를 차감
    UPDATE TB_MEMBER_STOCK
    SET STOCK_QTY = STOCK_QTY - p_purchase_qty
    WHERE MEMBER_UID = p_member_uid AND STOCK_ID = p_stock_id;
    
    -- 3. 구매 기록을 TB_TRADELOG에 등록
    INSERT INTO TB_TRADELOG VALUES(TRADE_ID_SEQ.NEXTVAL,p_member_uid, DEFAULT,
                                    p_stock_id, p_purchase_qty, p_purchase_price, '구매');
        
    -- 4. p_purchase_price 만큼 p_member_uid의 TB_MEMBER.BALANCE를 차감
    UPDATE TB_MEMBER
    SET BALANCE = BALANCE - p_purchase_price
    WHERE MEMBER_UID = p_member_uid;
    
END;
/

-- =============== 기본 데이터 삽입 ===================

INSERT INTO TB_STOCK_LIST(STOCK_ID, STOCK_NAME) VALUES(STOCK_ID_SEQ.NEXTVAL,'LG전자');
INSERT INTO TB_STOCK_LIST(STOCK_ID, STOCK_NAME) VALUES(STOCK_ID_SEQ.NEXTVAL,'삼성전자');
INSERT INTO TB_STOCK_LIST(STOCK_ID, STOCK_NAME) VALUES(STOCK_ID_SEQ.NEXTVAL,'롯데케미칼');
INSERT INTO TB_STOCK_LIST(STOCK_ID, STOCK_NAME) VALUES(STOCK_ID_SEQ.NEXTVAL,'현대모비스');
INSERT INTO TB_STOCK_LIST(STOCK_ID, STOCK_NAME) VALUES(STOCK_ID_SEQ.NEXTVAL,'KB금융');

INSERT INTO TB_MEMBER_RANK VALUES('M1','신규회원');
INSERT INTO TB_MEMBER_RANK VALUES('M2','일반회원');
INSERT INTO TB_MEMBER_RANK VALUES('M3','우수회원');
INSERT INTO TB_MEMBER_RANK VALUES('AD','관리자');

COMMIT;

-- ==========================
-- VO에 넣을 데이터 뽑아낼 쿼리
SELECT *
FROM TB_MEMBER_STOCK
JOIN TB_STOCK_LIST USING(STOCK_ID)
WHERE MEMBER_UID = 1;

SELECT *
FROM TB_SHARE
JOIN TB_STOCK_LIST USING(STOCK_ID)
WHERE MEMBER_UID = 1;





